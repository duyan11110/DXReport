@page
@using DevExtreme.AspNet.Mvc
@using Microsoft.Extensions.Localization
@using Module1.Localization
@using Module1.Samples
@using Module1.Web.Pages.Module1
@model Module1.Web.Pages.Module1.IndexModel
@inject IStringLocalizer<Module1Resource> L

@{
}
<h1>Module1</h1>
@(Html.DevExtreme().DataGrid<NewRemittanceTransactionDto>()
    .ID("grdRMT")
    .DataSource(Model.RMTList, "LineNumber")
    .ShowBorders(true)
    .ShowRowLines(true)
    .RepaintChangesOnly(true)
    .Scrolling(s => s.Mode(GridScrollingMode.Infinite))
    .Paging(p => p.PageSize(50))
    .Editing(e => e
        .Mode(GridEditMode.Batch)
        .RefreshMode(GridEditRefreshMode.Reshape)
        .AllowAdding(true)
        .AllowDeleting(true)
        .AllowUpdating(true)
        .NewRowPosition(GridNewRowPosition.Last)
    )
    .RowAlternationEnabled(true)
    .ColumnFixing(c => c.Enabled(true))
    .ColumnAutoWidth(true)
    .Height(new JS("window.innerHeight - 450"))
    .Columns(columns =>
    {
        columns.AddFor(m => m.LineNumber).DataField("lineNumber").Alignment(HorizontalAlignment.Center)
        .AllowEditing(false);
        columns.Add()
            .Type(GridCommandColumnType.Buttons)
            .Width(110)
            .Buttons(b =>
            {
                b.Add().Name(GridColumnButtonName.Delete);
            })
        .Fixed(true)
        .FixedPosition(HorizontalEdge.Right).Visible(true);
        columns.AddFor(m => m.RMTCCY).DataField("rmtccy").Alignment(HorizontalAlignment.Center);
        columns.AddFor(m => m.RMTAmount).DataField("rmtAmount").DataType(GridColumnDataType.Number).Alignment(HorizontalAlignment.Right).Format("#,##0.00");
        columns.AddFor(m => m.EquivRMTCCY).DataField("equivRMTCCY").Alignment(HorizontalAlignment.Center);
        columns.AddFor(m => m.EquivRMTAmount).DataField("equivRMTAmount").DataType(GridColumnDataType.Number).Alignment(HorizontalAlignment.Right).Format("#,##0.00");
        columns.AddFor(m => m.DebitACNo2).DataField("debitACNo2").Alignment(HorizontalAlignment.Center);
        columns.AddFor(m => m.Custodian).DataField("custodian").Alignment(HorizontalAlignment.Center);
        columns.AddFor(m => m.ODCCY).DataField("odccy").Alignment(HorizontalAlignment.Center).AllowEditing(false);
        columns.AddFor(m => m.ODEquivCCY).DataField("odEquivCCY").Alignment(HorizontalAlignment.Center);
        columns.AddFor(m => m.ODAmount).DataField("odAmount").DataType(GridColumnDataType.Number).Alignment(HorizontalAlignment.Right).Format("#,##0.00");
        columns.AddFor(m => m.ODEquivAmount).DataField("odEquivAmount").DataType(GridColumnDataType.Number).Alignment(HorizontalAlignment.Right).Format("#,##0.00");
    })
    .Summary(s => s
        .RecalculateWhileEditing(true)
        .TotalItems(totalItems =>
        {
            totalItems.AddFor(m => m.LineNumber)
                .SummaryType(SummaryType.Count)
                .DisplayFormat("Total records: {0}")
                .ShowInColumn("lineNumber");
            totalItems.AddFor(m => m.RMTAmount)
                .SummaryType(SummaryType.Sum)
                .DisplayFormat("Total RMT Amount: {0}")
                .ValueFormat("#,##0.00")
                .ShowInColumn("rmtAmount");
            totalItems.AddFor(m => m.EquivRMTAmount)
                .SummaryType(SummaryType.Sum)
                .DisplayFormat("Total equiv.RMT Amount: {0}")
                .ValueFormat("#,##0.00")
                .ShowInColumn("equivRMTAmount");
            totalItems.AddFor(m => m.ODAmount)
                .SummaryType(SummaryType.Sum)
                .DisplayFormat("Total OD Amount: {0}")
                .ValueFormat("#,##0.00")
                .ShowInColumn("odAmount");
            totalItems.AddFor(m => m.ODEquivAmount)
                .SummaryType(SummaryType.Sum)
                .DisplayFormat("Total OD EquivAmount: {0}")
                .ValueFormat("#,##0.00")
                .ShowInColumn("odEquivAmount");
        })
    )
    .OnInitNewRow("onInitNewRow")
)
<script>
    function onInitNewRow(e) {
        e.component.navigateToRow(e.key);
        var newRowLineNumber = 1 + e.component.option("editing.changes").filter(item => item.type === "insert").length;
        if (e.component.totalCount() >= 0)
            newRowLineNumber = newRowLineNumber + e.component.totalCount();
        const newGridItem = {
            lineNumber: newRowLineNumber
        };
        e.data = newGridItem;
    }
</script>